on:
  push:

jobs:
  process:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Read test file
        id: read-test
        run: |
          content=$(cat tests/test_main.py)
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          echo "::set-output name=content::$content"

      - name: OpenAI ChatGPT Action
        id: gpt-response
        uses: cahaseler/openai-api@v1.0.0
        with:
          apiKey: ${{ secrets.OPENAI_API_KEY }}
          prompt: 'Given the following Python unittest code, please provide a detailed description of the test(s) and their purpose in a markdown format suitable for documentation. Consider including the title, purpose, details, and example code in the description. You response will be automaticly appended to the README.md so it is very important that you send back only the markdown code in your reponse.'
          input: '${{ steps.read-test.outputs.content }}'
          model: 'gpt-4'
          temperature: 1
          max_tokens: 200

      - name: Print Response to Log
        run: |
          echo "Response: ${{ steps.gpt-response.outputs.completion }}"

      - name: Commit and push using Octokit
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.SECRET_PAT }}
          script: |
            const fs = require('fs');
            const { owner, repo } = context.repo;
            const path = "intake.md";
            const message = "automatic update from workflow";

            // Read the modified intake.md content
            const modifiedContent = fs.readFileSync('./intake.md', 'utf-8');
            const base64Content = Buffer.from(modifiedContent).toString('base64');

            // Create the blob for the modified content
            const blob = await github.rest.git.createBlob({
              owner,
              repo,
              content: base64Content,
              encoding: 'base64'
            });

            // Get the SHA for the current branch
            const branch = await github.rest.repos.getBranch({ owner, repo, branch: context.ref.replace('refs/heads/', '') });
            const branchSha = branch.data.commit.sha;

            // Create a new tree
            const tree = await github.rest.git.createTree({
              owner,
              repo,
              base_tree: branchSha,
              tree: [{
                path: path,
                mode: '100644',
                type: 'blob',
                sha: blob.data.sha
              }]
            });

            // Create a new commit
            const commit = await github.rest.git.createCommit({
              owner,
              repo,
              message: message,
              tree: tree.data.sha,
              parents: [branchSha]
            });

            // Update the branch to point to the new commit
            await github.rest.git.updateRef({
              owner,
              repo,
              ref: 'heads/' + context.ref.replace('refs/heads/', ''),
              sha: commit.data.sha
            });
