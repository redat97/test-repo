name: Reusable workflow to check organization standards

on: [push, pull_request]


jobs:
  validate-name:
    runs-on: ubuntu-latest
    steps:
    - name: Check repository name
      uses: actions/github-script@v5
      with:
        script: |
          const { repo } = context.repo;

          if (repo.includes('_')) {
            core.setFailed("Repository name contains underscores (_). Please remove them and use dashes (-) instead.");
          }

    - name: Check repository visibility
      uses: actions/github-script@v5
      with:
        script: |
          const { owner,repo } = context.repo;
          const repoDetails = await github.rest.repos.get({ owner,repo })

          if (repoDetails.data.private){
            core.setFailed("Repository is private, please make it public");
          }
      if: always() # Run step even if previous steps fail.



    - name: Check repository description
      uses: actions/github-script@v5
      with:
        script: |
          const { owner, repo } = context.repo;
          const repoDetails = await github.rest.repos.get({ owner, repo });

          if (!repoDetails.data.description) {
            core.setFailed("The repository does not have a description, please add one.");
          }
      if: always()

    - name: Check branch protection
      uses: actions/github-script@v5
      with:
        github-token: ${{ secrets.SECRET_PAT }}
        script: |
          const { owner, repo } = context.repo;
          try {
            const protection = await github.rest.repos.getBranchProtection({
              owner,
              repo,
              branch: 'main'
            });
          } catch (error) {
            if (error.message.includes("Branch not protected")) {
              core.setFailed("The main branch is not protected, please protect it.");
            } else {
              core.setFailed(`An error occurred: ${error.message}`);
            }
            return;
          }
      if: always() # Run step even if previous steps fail.

    - name: Checkout code
      uses: actions/checkout@v3

    - name : Edit intake file
      run: |
          if [[ -f "intake.md" ]]; then
            sed -i 's/\* \[ \] \[Configure repository to our own internal standards\]/\* \[x\] \[Configure repository to our own internal standards\]/' intake.md
          else
            echo "intake.md does not exist, this step will be skipped. Refer to rel-dev-doc repo for intake template"
          fi

#    - name: Pushing the changes to PR
#      run: |
#        branch_name=$(echo ${GITHUB_REF#refs/heads/})
#        git diff
#        git config --local user.email "action@github.com"
#        git config --local user.name "GitHub Action"
#        git add -A
#        if [[ "$(git status --porcelain)" != "" ]]; then
#          git commit -m "Update intake.md based on checks"
#          git push https://${{ secrets.SECRET_PAT }}@github.com/${{ github.repository }} HEAD:$branch_name
#        fi