on:
  push:
    paths-ignore:
      - '**.md'

jobs:
  process:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Read test file
        id: read-test
        run: |
          test_file=$(cat tests/test_main.py)
          test_file="${test_file//'%'/'%25'}"
          test_file="${test_file//$'\n'/'%0A'}"
          test_file="${test_file//$'\r'/'%0D'}"
          echo "::set-output name=test_file::$test_file"


      - name: Read test file
        id: read-readme
        run: |
          readme=$(cat README.md)
          readme="${readme//'%'/'%25'}"
          readme="${readme//$'\n'/'%0A'}"
          readme="${readme//$'\r'/'%0D'}"
          echo "::set-output name=readme::$readme"

      - name: OpenAI ChatGPT Action
        id: gpt-response
        uses: cahaseler/openai-api@v1.0.0
        with:
          apiKey: ${{ secrets.OPENAI_API_KEY }}
          prompt: 'I want you to act as a test documentation expert, your first job is to look at the content of the labeled [TEST-CODE]. Then, if the [README] is empty, generate a clean looking markdown code which includes a detailed description of each test as well as its purpose based on the test title and comment if there are any. You need to SEND BACK ONLY THE MARKDOWN CODE. In the case in which the [README] is not empty, you will add a detailed description of what each MISSING test does and tests and send back ONLY THE MARKDOWN CODE OF ONLY THE MISSING TEST VERY IMPORTANT to append to the readMe file so no "The generated markdown code for the missing test description is as follows:". It also needs to fit the format of the other test description'
          input: 'This is the TEST-CODE : ${{ steps.read-test.outputs.test_file }}; This is the README : ${{ steps.read-test.outputs.readme }}'
          model: 'gpt-3.5-turbo'
          temperature: 1
          max_tokens: 200

      - name: Print Response to Log
        run: |
          echo "Response: ${{ steps.gpt-response.outputs.completion }}"

      - name: Append Response to README
        run: |
          echo "${{ steps.gpt-response.outputs.completion }}" >> README.md

      - name: Commit and push using Octokit
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.SECRET_PAT }}
          script: |
            const fs = require('fs');
            const { owner, repo } = context.repo;
            const path = "README.md";
            const message = "automatic update from workflow";

            // Read the modified README.md content
            const modifiedContent = fs.readFileSync('./README.md', 'utf-8');
            const base64Content = Buffer.from(modifiedContent).toString('base64');

            // Create the blob for the modified content
            const blob = await github.rest.git.createBlob({
              owner,
              repo,
              content: base64Content,
              encoding: 'base64'
            });

            // Get the SHA for the current branch
            const branch = await github.rest.repos.getBranch({ owner, repo, branch: context.ref.replace('refs/heads/', '') });
            const branchSha = branch.data.commit.sha;

            // Create a new tree
            const tree = await github.rest.git.createTree({
              owner,
              repo,
              base_tree: branchSha,
              tree: [{
                path: path,
                mode: '100644',
                type: 'blob',
                sha: blob.data.sha
              }]
            });

            // Create a new commit
            const commit = await github.rest.git.createCommit({
              owner,
              repo,
              message: message,
              tree: tree.data.sha,
              parents: [branchSha]
            });

            // Update the branch to point to the new commit
            await github.rest.git.updateRef({
              owner,
              repo,
              ref: 'heads/' + context.ref.replace('refs/heads/', ''),
              sha: commit.data.sha
            });
